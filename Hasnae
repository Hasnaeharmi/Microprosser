#include <xc.h>
#include <stdint.h>

/* ====================== PERSON 2 ======================
   >> CONFIGURATION + DEFINITIONS + GLOBALS + ALERTS
   >> DHT11 SENSOR CODE
====================================================== */

// CONFIG
#pragma config FOSC = HS        
#pragma config WDTE = OFF       
#pragma config PWRTE = ON       
#pragma config BOREN = ON       
#pragma config LVP = OFF        
#pragma config CPD = OFF        
#pragma config WRT = OFF        
#pragma config CP = OFF         

#define _XTAL_FREQ 4000000

// Pin Definitions
#define DHT11_PIN PORTAbits.RA1
#define DHT11_DIR TRISAbits.TRISA1
#define LED       PORTDbits.RD6
#define BUZZER    PORTDbits.RD7

#define ALERT_TEMP  25

// Globals
uint8_t temperature, humidity;
uint8_t checksum_error = 0;
uint8_t timeout_flag = 0;
unsigned char status = 0;

// DHT11 SENSOR FUNCTION
uint8_t read_dht11(void) {
    uint8_t data[5] = {0};
    uint8_t i, j;

    checksum_error = 0;
    timeout_flag = 0;

    // Start signal
    TRISAbits.TRISA1 = 0;
    PORTAbits.RA1 = 0;
    __delay_ms(18);
    PORTAbits.RA1 = 1;
    __delay_us(30);
    TRISAbits.TRISA1 = 1;

    for (i = 0; i < 1000 && PORTAbits.RA1; i++) __delay_us(1);
    if (i >= 1000) { timeout_flag = 1; return 0; }

    for (i = 0; i < 1000 && !PORTAbits.RA1; i++) __delay_us(1);
    if (i >= 1000) { timeout_flag = 1; return 0; }

    for (i = 0; i < 1000 && PORTAbits.RA1; i++) __delay_us(1);
    if (i >= 1000) { timeout_flag = 1; return 0; }

    for (i = 0; i < 5; i++) {
        for (j = 0; j < 8; j++) {
            while (!PORTAbits.RA1);
            __delay_us(30);
            if (PORTAbits.RA1)
                data[i] |= (1 << (7 - j));
            while (PORTAbits.RA1);
        }
    }

    if (data[4] != (data[0] + data[1] + data[2] + data[3])) {
        checksum_error = 1;
        return 0;
    }

    humidity = data[0];
    temperature = data[2];
    return 1;
}

// ALERTS
void check_temperature_alerts(void) {
    if (temperature >= ALERT_TEMP) {
        LED = 1;
        BUZZER = 1;
    } else {
        LED = 0;
        BUZZER = 0;
    }
}
